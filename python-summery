一.字符串方法
1.join:用于合并序列的元素，且元素都必须是字符串，如'+'.join(['1','2','3','4']>>>'1+2+3+4'

2.split:作用与join相反，用于将字符串拆分为序列，如 '1 2 3 4'.split() >>> ['1', '2', '3', '4']
注意，如果没有指定分隔符，将默认在单个或多个连续的空白字符（空格、制表符、换行符
等）处进行拆分

3.find:用于在字符串中查找子串。如果找到，就返回子串的第一个字符的索引，否则返回-1。如 'hello'.find('l') >>> 2

4.lower:返回字符串的小写版本。如 'All'.lower() >>> 'all'

5.replace:将指定字符串替换为另一个字符串，并返回替换后的结果。如 'i like python'.replace('python','java') >>> 'i like java'

6.strip:将字符串开头和末尾的空白（但不包括中间的空白）删除，并返回删除后的结果。该方法还可以输入参数，用于删除指定的字符。如
'**** i want to get off the* whiteplace * ***'.strip('*') >>> 'i want to get off the* whiteplace' 

二.列表方法
1.append:用于将一个对象附加到列表末尾， 该方法就地修改列表,不会返回任何值。如 [1,2,3].append(4) >>>[1,2,3,4]

2.clear:就地清空列表的内容。如 [1,2,3].clear() >>>[], 等价于切片赋值语句 l[:] = []

3.copy：用于复制列表。如 a = [1,2,3], b = a.copy(), b =[1,2,3] >>> 修改b不会影响a

4.count:用于计算指定的元素在列表中出现了几次。如 [1,2,3,2,4,2].count(2) >>> 3

5.extend: 能够同时将多个值附加到列表末尾，为此可将这些值组成的序列作为参数提供给方法extend。如 a = [1,2], b = [3,4,5],a.extend(b)>>>[1,2,3,4,5]
* extend 方法和正常两个列表拼接的区别是前者会就地修改被拼接的列表，而后者不会改变原列表

6.index: 用于在列表中查找指定值第一次出现的索引。如 [1,2,3,4,2,3].index(2) >>> 1

7.insert: 用于将一个对象插入列表，该方法修改列表，但不返回任何值。如 x = [1,2,3,4,5], x.insert(2,'hi')， x>>> [1,2,'hi',3,4,5]

8.pop: 用于从列表中删除一个元素（默认为最后一个元素），并返回这一元素。如 x = [1,2,3], x.pop()>>>3； 也可输入索引作为参数如 x.pop(0）>>> 1
* pop 是唯一既修改列表又返回一个非 None 值的列表方法

9.remove: 用于删除第一个为指定值的元素,该方法也是就地修改列表而不会返回修改后的新列表。
如 ['to','be','or','not','to','be'].remove('be')>>>['to','or','not','to','be']

10.reverse: 按相反的顺序排列列表中的元素, 该方法修改列表，但不返回任何值。如 x = [1,2,3], x.reverse() ， x >>> [3,2,1]

11.sort: 用于对列表就地排序，该方法修改列表，但不返回任何值。如 x = [2,1,7,3,5,4], x.sort(), x >>> [1,2,3,4,5,7]
另一种办法是使用函数sorted,事实上函数sorted可用于任何可迭代的对象，并总是返回一个列表。  如 y = sorted(x) ,y >>> [1,2,3,4,5,7], x >>> [2,1,7,3,5,4]；
sorted('python') >>> ['p','h','n','o','t','y']

12.高级排序：方法sort接受两个关键字参数key 和 reverse。key 为用与排序的函数，reverse的值可为True 或False,以指出是否要按相反的顺序对列表进行排序。

三.文件
打开文件：要以任何方式使用文件，都得先打开文件，这样才能访问它。

1.函数open()，它位于自动导入的模块io中，它接受一个参数：要打开的文件的名称，如 f = open(somefile.txt)。该函数返回一个表示文件的对象。
当将一个简单的文件名传给该函数时，python将在当前执行的文件（即.py文件）所在的目录中查找文件。
要让python打开不与程序文件位于同一个目录中的文件，需要提供文件路径。可以使用相对路径和绝对路径。

2.with open("somefile.txt") as file_object:
	do_something

这个结构中的关键字with在不再需要访问文件后会自动将其关闭。打开文件时，可指定 读取模式 （ 'r' ）、 写入模式 （ 'w' ）、 附加模式 （ 'a' ）或让你能够读取和写入文件的模式（ 'r+' ）。如果你省略了模式实参， Python 将以默认的只读模式打开文件。如果你要写入的文件不存在，函数 open() 将自动创建它。然而，以写入（ 'w' ）模式打开文件时千万要小心，因为如果指定的文件已经存在， Python 将在返回文件对象前清空
该文件。

文件的基本方法
1.读取行：
readlines():该方法从文件中读取每一行，并将其存储在一个列表中。
readline():该方法从文件中读取一行并返回它。也可提供一个非负整数，指定readline最多可读取多少个字符。

2.读取字符：
read(): 该方法可提供一个非负整数，指定最多可读取多少个字符，若为空则全部读取。

3.写入字符：
write(string):该方法总是将string写入到文件既有内容的后面。

4.写入文件：
with open(filename,'w') as file_object:
	file_object.write(string)


