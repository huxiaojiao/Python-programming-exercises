 
三.文件
打开文件：要以任何方式使用文件，都得先打开文件，这样才能访问它。

1.函数open()，它位于自动导入的模块io中，它接受一个参数：要打开的文件的名称，如 f = open(somefile.txt)。该函数返回一个表示文件的对象。
当将一个简单的文件名传给该函数时，python将在当前执行的文件（即.py文件）所在的目录中查找文件。
要让python打开不与程序文件位于同一个目录中的文件，需要提供文件路径。可以使用相对路径和绝对路径。

2.with open("somefile.txt") as file_object:
	do_something

这个结构中的关键字with在不再需要访问文件后会自动将其关闭。打开文件时，可指定 读取模式 （ 'r' ）、 写入模式 （ 'w' ）、 附加模式 （ 'a' ）或让你能够读取和写入文件的模式（ 'r+' ）。如果你省略了模式实参， Python 将以默认的只读模式打开文件。如果你要写入的文件不存在，函数 open() 将自动创建它。然而，以写入（ 'w' ）模式打开文件时千万要小心，因为如果指定的文件已经存在， Python 将在返回文件对象前清空
该文件。

文件的基本方法
1.读取行：
readlines():该方法从文件中读取每一行，并将其存储在一个列表中。
readline():该方法从文件中读取一行并返回它。也可提供一个非负整数，指定readline最多可读取多少个字符。

2.读取字符：
read(): 该方法可提供一个非负整数，指定最多可读取多少个字符，若为空则全部读取。

3.写入字符：
write(string):该方法总是将string写入到文件既有内容的后面。

4.写入文件：
with open(filename,'w') as file_object:
	file_object.write(string)


一.基本知识
1.表达式与语句的区别
表达式相当于菜谱中的原料，语句则相当于菜谱中的操作说明。
表达式是一些东西，而语句做一些事情。所有语句的一个根本特征：执行修改操作。
如：print在python 2.x中是一条语句，而在python 3.x中是一个函数，需要用括号括起来作为参数。
在赋值语句中，他们没有可供交互式解释器打印的值。而交互式解释器总是会将表达式的值打印出来。由于函数调用也返回一个值，所以也可看成是表达式。

2.数
2 // 3 --> 0 :整除时，整数总是向下圆整
round(2 / 3) --> 1.0 ：round圆整到最接近的整数，并在两个整数一样近时圆整到偶数。
int(32.9) --> 32: 同理，整数总是向下圆整
math.floor(32.9) --> 32
math.ceil(32.1) --> 33
nan(not a number):指的是非数值

3.字符串（在python3中，所有的字符串都是unicode字符串）
python打印所有的字符串时，都用引号将其括起。这是因为python打印值时，保留其在代码中的样子，而不是你希望用户看到的样子。

print语句可以通过两种不同的机制将值转换成字符串:
print(str('hello,\nworld')) -->
hello,
world
：str是一个类，让字符串以用户能看懂的形式被打印出来。

print(repr('hello,\nworld')) --> 'hello,\nworld'： repr（representational）是一个函数，接受一个对象作为参数，让字符串显示在代码中合理的展示。

长字符串：可使用三引号表示很长的字符串（跨越多行的字符串）
如print('''this is one line
this is the second line
and this is the third line''')

在常规字符串中，反斜杠可以对字符进行转义。

原始字符串用前缀r(raw string)表示。
但是有个例外，引号还是需要转义的，意味着用来转义的斜杠会被包含在字符串中，所以原字符串中的最后一个字符不能是反斜杠。
如print(r'let\'s go') --> let\'s go

二.数据结构
数据结构是以某种方式组合起来的数据元素集合，在python中，最基本的数据结构为序列。pyhon内置了多种序列，最常见的是列表，元组和字符串。
python支持一种数据结构的基本概念，名为容器。容器就是可包含其他对象的对象。两种主要的容器是序列和映射。还有一种既不是序列也不是映射的容器叫集合。

1.通用的序列操作

1.1 索引：序列中的所有元素都有编号---从0开始递增。-1是最后一个元素的位置。
1.2 切片：通常提供两个索引来指定切片的边界，第一个索引指定的元素包含在切片内，第二个索引指定的元素不包含在切片内。
若第一个索引指定的元素位于第二个索引指定的元素后面，结果就为空序列。
如果切片结束于序列末尾，可省略第二个索引；如果切片始于序列开头，可省略第一个索引。
要复制整个序列，可将两个索引都省略。
不省略索引且步长为负数时，第一个索引必须比第二个索引大。
1.3 序列相加：使用加号来拼接序列，但是不能拼接不同类型的序列。
1.4 乘法：使用* 重复序列x次来创建一个新序列。
1.5 成员资格检查：使用in运费符检查特定值是否包含在序列中。返回值为布尔值。
1.6 内置函数：len, min, max
1.7 list: 实际是个类，可接受所有序列作为参数生成列表。

2.列表的操作

2.1 修改列表：通过索引给元素赋值，但不能给不存在的元素赋值。
2.2 删除元素：del l[index]
2.3 给切片赋值：可改变列表长度，一次性插入或替换多个元素

3.列表方法

3.1 append:用于将一个对象附加到列表末尾， 该方法就地修改列表,不会返回任何值。如 [1,2,3].append(4) >>>[1,2,3,4]

3.2 clear:就地清空列表的内容。如 [1,2,3].clear() >>>[], 等价于切片赋值语句 l[:] = []

3.3 copy：用于复制列表。如 a = [1,2,3], b = a.copy(), b =[1,2,3] >>> 修改b不会影响a

3.4 count:用于计算指定的元素在列表中出现了几次。如 [1,2,3,2,4,2].count(2) >>> 3

3.5 extend: 能够同时将多个值附加到列表末尾，为此可将这些值组成的序列作为参数提供给方法extend。如 a = [1,2], b = [3,4,5],a.extend(b)>>>[1,2,3,4,5]
* extend 方法和正常两个列表拼接的区别是前者会就地修改被拼接的列表，而后者不会改变原列表

3.6 index: 用于在列表中查找指定值第一次出现的索引。如 [1,2,3,4,2,3].index(2) >>> 1

3.7 insert: 用于将一个对象插入列表，该方法修改列表，但不返回任何值。如 x = [1,2,3,4,5], x.insert(2,'hi')， x>>> [1,2,'hi',3,4,5]

3.8 pop: 用于从列表中删除一个元素（默认为最后一个元素），并返回这一元素。如 x = [1,2,3], x.pop()>>>3； 也可输入索引作为参数如 x.pop(0）>>> 1
* pop 是唯一既修改列表又返回一个非 None 值的列表方法

3.9 remove: 用于删除第一个为指定值的元素,该方法也是就地修改列表而不会返回修改后的新列表。
如 ['to','be','or','not','to','be'].remove('be')>>>['to','or','not','to','be']

3.10 reverse: 按相反的顺序排列列表中的元素, 该方法修改列表，但不返回任何值。如 x = [1,2,3], x.reverse() ， x >>> [3,2,1]

3.11 sort: 用于对列表就地排序，该方法修改列表，但不返回任何值。如 x = [2,1,7,3,5,4], x.sort(), x >>> [1,2,3,4,5,7]
另一种办法是使用函数sorted,事实上函数sorted可用于任何可迭代的对象，并总是返回一个列表。  如 y = sorted(x) ,y >>> [1,2,3,4,5,7], x >>> [2,1,7,3,5,4]；
sorted('python') >>> ['p','h','n','o','t','y']

3.12 高级排序：方法sort接受两个关键字参数key 和 reverse。key 为用与排序的函数，reverse的值可为True 或False,以指出是否要按相反的顺序对列表进行排序。

4.元组

4.1 元组只要将一些值用逗号分隔，就能自动创建一个元组。空元组用（）表示。（3，）表示一个值的元组，逗号不能漏掉。
4.2 tuple()也是一个类：将一个序列作为参数，并将其转换为元组。如果参数已经是元组，就原封不动地返回它。

5.使用字符串

5.1 设置字符串的格式：如 s = 'i love %s,he likes %s' %('cat','dog')
%s 称为转换说明符，指出了要将值插入什么地方。

5.2 方法format：每个替换字段都用花括号括起，其中可能包含名称或索引，还可能包含对相应值进行转换和格式设置的信息。
如'{},{},{}'.format('first','second','third') --> 'first,second,third'；
’{3},{2},{0},{1}'.format('a','d','r','c') --> 'a,d,r,c';
'{name} is {weight:.2f}'.format('anna', '47.2345')--> 'anna is 47.23'；

5.3 join:用于合并序列的元素，且元素都必须是字符串，如'+'.join(['1','2','3','4']>>>'1+2+3+4'

5.4 split:作用与join相反，用于将字符串拆分为序列，如 '1 2 3 4'.split() >>> ['1', '2', '3', '4']
注意，如果没有指定分隔符，将默认在单个或多个连续的空白字符（空格、制表符、换行符
等）处进行拆分

5.5 find:用于在字符串中查找子串。如果找到，就返回子串的第一个字符的索引，否则返回-1。如 'hello'.find('l') >>> 2

5.6 lower:返回字符串的小写版本。如 'All'.lower() >>> 'all'

5.7 replace:将指定字符串替换为另一个字符串，并返回替换后的结果。如 'i like python'.replace('python','java') >>> 'i like java'

5.8 strip:将字符串开头和末尾的空白（但不包括中间的空白）删除，并返回删除后的结果。该方法还可以输入参数，用于删除指定的字符。如
'**** i want to get off the* whiteplace * ***'.strip('*') >>> 'i want to get off the* whiteplace' 


三.类和对象
1.类是一个模板，可以将数据和方法进行封装。

四.路径
概念：
一.绝对路径和相对路径
绝对路径：总是从根目录开始
相对路径：它相对于程序的当前工作目录
注：单个点(.)用作目录名称时，是这个目录的缩写；两个句点(..)代表父文件夹

1.os.getcwd()函数可以获取程序的当前工作路径的字符串
2.os.chdir(path)函数可以更改当前工作目录为指定的其他目录
3.os.makedirs()函数用来创建新文件夹。
4.os.path.abspath(path): 返回参数路径的绝对路径
5.os.path.isabs(path):判断参数路径是否是绝对路径，返回一个布尔值
6.os.path.dirname(path):返回参数路径中最后一个斜杠前的所有内容
7.os.path.basename(path):返回参数路径中最后一个斜杠后的所有内容，通常是一个文件名或目录名
8.os.path.split(path):返回一个元组，包含参数路径中的目录名称和基本名称
9.path.split(os.path.sep):利用字符串的split方法，返回的是路径中每个文件夹的列表

五.自动化测试框架unittest

1.unittest几大组成部分：
Testcase: 用例对象，编写测试用例时要继承该类，以具有该类的属性和方法
TestSuite: 测试用例的集合，用来组织用例，支持嵌套
Testloader: 用例加载器，用于向TestSuite中添加用例
TextTestRunner: 用例执行器（输出文本结果), 一般以TestSuite为单位执行用例
TestResult:测试结果

2.用例编写的规则：
2.1 首先新建一个test开头（必须）的.py文件
2.2 导入unittest
2.3 编写一个Test开头（必须）的类，并继承unittest.Testcase,作为测试类
2.4 在类中编写test开头(必须)的方法，作为用例

注：用例执行顺序并非按书写顺序执行，而是按用例名ascii码先后顺序执行

3.Test fixtures(用例包裹方法)：setUp,tearDown方法,用于分别在测试前及测试后执行。
3.1 setUp()/tearDown(): 每个用例执行前/后执行一次
3.2 setUpClass()/ tearDownClass(): 每个测试类加载时/结束时执行一次
3.3 setUpModule()/ tearDownModule()： 每个测试模块（即一个文件）加载/ 结束时执行


六.Requests库
1.

